#include "sysconfig.h"
#include "sysdeps.h"

#include "options.h"
#include "inputdevice.h"
#include "keymap.h"
#include "keyboard.h"

#if 0
static struct uae_input_device_kbr_default keytrans[] = {

	{ INPUTEVENT_KEY_ESC, INPUTEVENT_KEY_ESC },

	{ INPUTEVENT_KEY_F1, INPUTEVENT_KEY_F1 },
	{ INPUTEVENT_KEY_F2, INPUTEVENT_KEY_F2 },
	{ INPUTEVENT_KEY_F3, INPUTEVENT_KEY_F3 },
	{ INPUTEVENT_KEY_F4, INPUTEVENT_KEY_F4 },
	{ INPUTEVENT_KEY_F5, INPUTEVENT_KEY_F5 },

	{ INPUTEVENT_KEY_F6, INPUTEVENT_KEY_F6 },
	{ INPUTEVENT_KEY_F7, INPUTEVENT_KEY_F7 },
	{ INPUTEVENT_KEY_F8, INPUTEVENT_KEY_F8 },
	{ INPUTEVENT_KEY_F9, INPUTEVENT_KEY_F9 },
	{ INPUTEVENT_KEY_F10, INPUTEVENT_KEY_F10 },

	{ INPUTEVENT_KEY_1, INPUTEVENT_KEY_1 },
	{ INPUTEVENT_KEY_2, INPUTEVENT_KEY_2 },
	{ INPUTEVENT_KEY_3, INPUTEVENT_KEY_3 },
	{ INPUTEVENT_KEY_4, INPUTEVENT_KEY_4 },
	{ INPUTEVENT_KEY_5, INPUTEVENT_KEY_5 },
	{ INPUTEVENT_KEY_6, INPUTEVENT_KEY_6 },
	{ INPUTEVENT_KEY_7, INPUTEVENT_KEY_7 },
	{ INPUTEVENT_KEY_8, INPUTEVENT_KEY_8 },
	{ INPUTEVENT_KEY_9, INPUTEVENT_KEY_9 },
	{ INPUTEVENT_KEY_0, INPUTEVENT_KEY_0 },

	{ INPUTEVENT_KEY_TAB, INPUTEVENT_KEY_TAB },

	{ INPUTEVENT_KEY_A, INPUTEVENT_KEY_A },
	{ INPUTEVENT_KEY_B, INPUTEVENT_KEY_B },
	{ INPUTEVENT_KEY_C, INPUTEVENT_KEY_C },
	{ INPUTEVENT_KEY_D, INPUTEVENT_KEY_D },
	{ INPUTEVENT_KEY_E, INPUTEVENT_KEY_E },
	{ INPUTEVENT_KEY_F, INPUTEVENT_KEY_F },
	{ INPUTEVENT_KEY_G, INPUTEVENT_KEY_G },
	{ INPUTEVENT_KEY_H, INPUTEVENT_KEY_H },
	{ INPUTEVENT_KEY_I, INPUTEVENT_KEY_I },
	{ INPUTEVENT_KEY_J, INPUTEVENT_KEY_J },
	{ INPUTEVENT_KEY_K, INPUTEVENT_KEY_K },
	{ INPUTEVENT_KEY_L, INPUTEVENT_KEY_L },
	{ INPUTEVENT_KEY_M, INPUTEVENT_KEY_M },
	{ INPUTEVENT_KEY_N, INPUTEVENT_KEY_N },
	{ INPUTEVENT_KEY_O, INPUTEVENT_KEY_O },
	{ INPUTEVENT_KEY_P, INPUTEVENT_KEY_P },
	{ INPUTEVENT_KEY_Q, INPUTEVENT_KEY_Q },
	{ INPUTEVENT_KEY_R, INPUTEVENT_KEY_R },
	{ INPUTEVENT_KEY_S, INPUTEVENT_KEY_S },
	{ INPUTEVENT_KEY_T, INPUTEVENT_KEY_T },
	{ INPUTEVENT_KEY_U, INPUTEVENT_KEY_U },
	{ INPUTEVENT_KEY_W, INPUTEVENT_KEY_W },
	{ INPUTEVENT_KEY_V, INPUTEVENT_KEY_V },
	{ INPUTEVENT_KEY_X, INPUTEVENT_KEY_X },
	{ INPUTEVENT_KEY_Y, INPUTEVENT_KEY_Y },
	{ INPUTEVENT_KEY_Z, INPUTEVENT_KEY_Z },

	{ INPUTEVENT_KEY_CAPS_LOCK, INPUTEVENT_KEY_CAPS_LOCK, ID_FLAG_TOGGLE },

	{ INPUTEVENT_KEY_NP_1, INPUTEVENT_KEY_NP_1 },
	{ INPUTEVENT_KEY_NP_2, INPUTEVENT_KEY_NP_2 },
	{ INPUTEVENT_KEY_NP_3, INPUTEVENT_KEY_NP_3 },
	{ INPUTEVENT_KEY_NP_4, INPUTEVENT_KEY_NP_4 },
	{ INPUTEVENT_KEY_NP_5, INPUTEVENT_KEY_NP_5 },
	{ INPUTEVENT_KEY_NP_6, INPUTEVENT_KEY_NP_6 },
	{ INPUTEVENT_KEY_NP_7, INPUTEVENT_KEY_NP_7 },
	{ INPUTEVENT_KEY_NP_8, INPUTEVENT_KEY_NP_8 },
	{ INPUTEVENT_KEY_NP_9, INPUTEVENT_KEY_NP_9 },
	{ INPUTEVENT_KEY_NP_0, INPUTEVENT_KEY_NP_0 },
	{ INPUTEVENT_KEY_NP_PERIOD, INPUTEVENT_KEY_NP_PERIOD },
	{ INPUTEVENT_KEY_NP_ADD, INPUTEVENT_KEY_NP_ADD },
	{ INPUTEVENT_KEY_NP_SUB, INPUTEVENT_KEY_NP_SUB },
	{ INPUTEVENT_KEY_NP_MUL, INPUTEVENT_KEY_NP_MUL },
	{ INPUTEVENT_KEY_NP_DIV, INPUTEVENT_KEY_NP_DIV },
	{ INPUTEVENT_KEY_ENTER, INPUTEVENT_KEY_ENTER },

	{ INPUTEVENT_KEY_SUB, INPUTEVENT_KEY_SUB },
	{ INPUTEVENT_KEY_EQUALS, INPUTEVENT_KEY_EQUALS },
	{ INPUTEVENT_KEY_BACKSPACE, INPUTEVENT_KEY_BACKSPACE },
	{ INPUTEVENT_KEY_RETURN, INPUTEVENT_KEY_RETURN },
	{ INPUTEVENT_KEY_SPACE, INPUTEVENT_KEY_SPACE },

	{ INPUTEVENT_KEY_SHIFT_LEFT, INPUTEVENT_KEY_SHIFT_LEFT },
	{ INPUTEVENT_KEY_CTRL, INPUTEVENT_KEY_CTRL },
	{ INPUTEVENT_KEY_AMIGA_LEFT, INPUTEVENT_KEY_AMIGA_LEFT },
	{ INPUTEVENT_KEY_ALT_LEFT, INPUTEVENT_KEY_ALT_LEFT },
	{ INPUTEVENT_KEY_ALT_RIGHT, INPUTEVENT_KEY_ALT_RIGHT },
	{ INPUTEVENT_KEY_AMIGA_RIGHT, INPUTEVENT_KEY_AMIGA_RIGHT },
	{ INPUTEVENT_KEY_CTRL_RIGHT, INPUTEVENT_KEY_CTRL_RIGHT },
	{ INPUTEVENT_KEY_SHIFT_RIGHT, INPUTEVENT_KEY_SHIFT_RIGHT },

	{ INPUTEVENT_KEY_CURSOR_UP, INPUTEVENT_KEY_CURSOR_UP },
	{ INPUTEVENT_KEY_CURSOR_DOWN, INPUTEVENT_KEY_CURSOR_DOWN },
	{ INPUTEVENT_KEY_CURSOR_LEFT, INPUTEVENT_KEY_CURSOR_LEFT },
	{ INPUTEVENT_KEY_CURSOR_RIGHT, INPUTEVENT_KEY_CURSOR_RIGHT },

	{ INPUTEVENT_KEY_DEL, INPUTEVENT_KEY_DEL },
	{ INPUTEVENT_KEY_HELP, INPUTEVENT_KEY_HELP },

	{ INPUTEVENT_KEY_LEFTBRACKET, INPUTEVENT_KEY_LEFTBRACKET },
	{ INPUTEVENT_KEY_RIGHTBRACKET, INPUTEVENT_KEY_RIGHTBRACKET },
	{ INPUTEVENT_KEY_SEMICOLON, INPUTEVENT_KEY_SEMICOLON },
	{ INPUTEVENT_KEY_SINGLEQUOTE, INPUTEVENT_KEY_SINGLEQUOTE },
	{ INPUTEVENT_KEY_BACKQUOTE, INPUTEVENT_KEY_BACKQUOTE },
	{ INPUTEVENT_KEY_BACKSLASH, INPUTEVENT_KEY_BACKSLASH },
	{ INPUTEVENT_KEY_COMMA, INPUTEVENT_KEY_COMMA },
	{ INPUTEVENT_KEY_PERIOD, INPUTEVENT_KEY_PERIOD },
	{ INPUTEVENT_KEY_DIV, INPUTEVENT_KEY_DIV },
	{ INPUTEVENT_KEY_30, INPUTEVENT_KEY_30 },

	{ INPUTEVENT_SPC_MASTER_VOLUME_DOWN, INPUTEVENT_SPC_MASTER_VOLUME_DOWN },
	{ INPUTEVENT_SPC_MASTER_VOLUME_UP, INPUTEVENT_SPC_MASTER_VOLUME_UP },
	{ INPUTEVENT_SPC_MASTER_VOLUME_MUTE, INPUTEVENT_SPC_MASTER_VOLUME_MUTE },

	{ INPUTEVENT_KEY_70, INPUTEVENT_KEY_70 },
	{ INPUTEVENT_KEY_71, INPUTEVENT_KEY_71 },
	//    { DIK_SYSRQ, INPUTEVENT_KEY_6E },
	//    { DIK_F12, INPUTEVENT_KEY_6F },
	{ INPUTEVENT_KEY_47, INPUTEVENT_KEY_47 },
	//    { DIK_PRIOR, INPUTEVENT_KEY_48 },
	{ INPUTEVENT_SPC_FREEZEBUTTON, INPUTEVENT_SPC_FREEZEBUTTON },
	{ INPUTEVENT_KEY_49, INPUTEVENT_KEY_49 },
	{ INPUTEVENT_KEY_4B, INPUTEVENT_KEY_4B },

	{ INPUTEVENT_KEY_CDTV_STOP, INPUTEVENT_KEY_CDTV_STOP },
	{ INPUTEVENT_KEY_CDTV_PLAYPAUSE, INPUTEVENT_KEY_CDTV_PLAYPAUSE },
	{ INPUTEVENT_KEY_CDTV_PREV, INPUTEVENT_KEY_CDTV_PREV },
	{ INPUTEVENT_KEY_CDTV_NEXT, INPUTEVENT_KEY_CDTV_NEXT },

	{ -1, 0 }
};

/*
static int kb_np[] = { UAEKEY_NUMPAD4, -1, UAEKEY_NUMPAD6, -1, UAEKEY_NUMPAD8, -1, UAEKEY_NUMPAD2, -1, UAEKEY_NUMPAD0, UAEKEY_NUMPAD5, -1, UAEKEY_NUMPAD_PERIOD, UAEKEY_NUMPAD_DIVIDE, UAEKEY_NUMPAD_ENTER, -1, -1 };
//static int kb_np[] = { AK_NP4, -1, AK_NP6, -1, AK_NP8, -1, AK_NP2, -1, UAEKEY_NUMPAD0, UAEKEY_NUMPAD5, -1, UAEKEY_NUMPADPERIOD, UAEKEY_NUMPADDIV, UAEKEY_ENTER, -1, -1 };
static int kb_ck[] = { UAEKEY_CURSOR_LEFT, -1, UAEKEY_CURSOR_RIGHT, -1, UAEKEY_CURSOR_UP, -1, UAEKEY_CURSOR_DOWN, -1, UAEKEY_RIGHT_CTRL, UAEKEY_RIGHT_ALT, -1, UAEKEY_LEFT_SHIFT, -1, -1 };
static int kb_se[] = { UAEKEY_A, -1, UAEKEY_D, -1, UAEKEY_W, -1, UAEKEY_S, -1, UAEKEY_LEFT_ALT, -1, UAEKEY_RIGHT_SHIFT, -1, -1 };
static int kb_cd32_np[] = { UAEKEY_NUMPAD4, -1, UAEKEY_NUMPAD6, -1, UAEKEY_NUMPAD8, -1, UAEKEY_NUMPAD2, -1, UAEKEY_NUMPAD1, -1, UAEKEY_NUMPAD3, -1, UAEKEY_NUMPAD7, -1, UAEKEY_NUMPAD9, -1, UAEKEY_PERIOD, -1, UAEKEY_NUMPAD_MINUS, -1, UAEKEY_NUMPAD_MULTIPLY, -1, -1 };
static int kb_cd32_ck[] = { UAEKEY_CURSOR_LEFT, -1, UAEKEY_CURSOR_RIGHT, -1, UAEKEY_CURSOR_UP, -1, UAEKEY_CURSOR_DOWN, -1, UAEKEY_NUMPAD1, -1, UAEKEY_NUMPAD3, -1, UAEKEY_NUMPAD7, -1, UAEKEY_NUMPAD9, -1, UAEKEY_NUMPAD_DIVIDE, -1, UAEKEY_NUMPAD_MINUS, -1, UAEKEY_NUMPAD_MULTIPLY, -1, -1 };
static int kb_cd32_se[] = { UAEKEY_A, -1, UAEKEY_D, -1, UAEKEY_W, -1, UAEKEY_S, -1, UAEKEY_NUMPAD1, -1, UAEKEY_NUMPAD3, -1, UAEKEY_NUMPAD7, -1, UAEKEY_NUMPAD9, -1, UAEKEY_NUMPAD_DIVIDE, -1, UAEKEY_NUMPAD_MINUS, -1, UAEKEY_NUMPAD_MULTIPLY, -1, -1 };
static int kb_xa1[] = { UAEKEY_NUMPAD4, -1, UAEKEY_NUMPAD6, -1, UAEKEY_NUMPAD8, -1, UAEKEY_NUMPAD2, UAEKEY_NUMPAD5, -1, UAEKEY_LEFT_CTRL, -1, UAEKEY_LEFT_ALT, -1, UAEKEY_SPACE, -1, -1 };
static int kb_xa2[] = { UAEKEY_D, -1, UAEKEY_G, -1, UAEKEY_R, -1, UAEKEY_F, -1, UAEKEY_A, -1, UAEKEY_S, -1, UAEKEY_Q, -1 };
static int kb_arcadia[] = { UAEKEY_F2, -1, UAEKEY_1, -1, UAEKEY_2, -1, UAEKEY_5, -1, UAEKEY_6, -1, -1 };
static int kb_arcadiaxa[] = { UAEKEY_1, -1, UAEKEY_2, -1, UAEKEY_3, -1, UAEKEY_4, -1, UAEKEY_6, -1, UAEKEY_LEFTBRACKET, UAEKEY_LEFT_SHIFT, -1, UAEKEY_RIGHTBRACKET, -1, UAEKEY_C, -1, UAEKEY_5, -1, UAEKEY_Z, -1, UAEKEY_X, -1, -1 };
static int *kbmaps[] = { kb_np, kb_ck, kb_se, kb_cd32_np, kb_cd32_ck, kb_cd32_se, kb_xa1, kb_xa2, kb_arcadia, kb_arcadiaxa };
*/
//static int kb_np[] = { INPUTEVENT_KEY_NP_4, -1, INPUTEVENT_KEY_NP_6, -1, INPUTEVENT_KEY_NP_8, -1, INPUTEVENT_KEY_NP_2, -1, INPUTEVENT_KEY_NP_0, INPUTEVENT_KEY_NP_5, -1, INPUTEVENT_KEY_NP_PERIOD, INPUTEVENT_KEY_NP_DIV, INPUTEVENT_KEY_ENTER, -1, -1 };
/*
static int kb_np[] = { 260, -1, AK_NP6, -1, 264, -1, AK_NP2, -1, INPUTEVENT_KEY_NP_0, 261, -1, INPUTEVENT_KEY_NP_PERIOD, INPUTEVENT_KEY_NP_DIV, INPUTEVENT_KEY_ENTER, -1, -1 };
static int kb_ck[] = { INPUTEVENT_KEY_CURSOR_LEFT, -1, INPUTEVENT_KEY_CURSOR_RIGHT, -1, INPUTEVENT_KEY_CURSOR_UP, -1, INPUTEVENT_KEY_CURSOR_DOWN, -1, INPUTEVENT_KEY_CTRL, INPUTEVENT_KEY_ALT_RIGHT, -1, INPUTEVENT_KEY_SHIFT_LEFT, -1, -1 };
static int kb_se[] = { INPUTEVENT_KEY_A, -1, INPUTEVENT_KEY_D, -1, INPUTEVENT_KEY_W, -1, INPUTEVENT_KEY_S, -1, INPUTEVENT_KEY_ALT_LEFT, -1, INPUTEVENT_KEY_SHIFT_RIGHT, -1, -1 };
static int kb_cd32_np[] = { INPUTEVENT_KEY_NP_4, -1, INPUTEVENT_KEY_NP_6, -1, INPUTEVENT_KEY_NP_8, -1, INPUTEVENT_KEY_NP_2, -1, INPUTEVENT_KEY_NP_1, -1, INPUTEVENT_KEY_NP_3, -1, INPUTEVENT_KEY_NP_7, -1, INPUTEVENT_KEY_NP_9, -1, INPUTEVENT_KEY_PERIOD, -1, INPUTEVENT_KEY_NP_SUB, -1, INPUTEVENT_KEY_NP_MUL, -1, -1 };
static int kb_cd32_ck[] = { INPUTEVENT_KEY_CURSOR_LEFT, -1, INPUTEVENT_KEY_CURSOR_RIGHT, -1, INPUTEVENT_KEY_CURSOR_UP, -1, INPUTEVENT_KEY_CURSOR_DOWN, -1, INPUTEVENT_KEY_NP_1, -1, INPUTEVENT_KEY_NP_3, -1, INPUTEVENT_KEY_NP_7, -1, INPUTEVENT_KEY_NP_9, -1, INPUTEVENT_KEY_NP_DIV, -1, INPUTEVENT_KEY_NP_SUB, -1, INPUTEVENT_KEY_NP_MUL, -1, -1 };
static int kb_cd32_se[] = { INPUTEVENT_KEY_A, -1, INPUTEVENT_KEY_D, -1, INPUTEVENT_KEY_W, -1, INPUTEVENT_KEY_S, -1, INPUTEVENT_KEY_NP_1, -1, INPUTEVENT_KEY_NP_3, -1, INPUTEVENT_KEY_NP_7, -1, INPUTEVENT_KEY_NP_9, -1, INPUTEVENT_KEY_NP_DIV, -1, INPUTEVENT_KEY_NP_SUB, -1, INPUTEVENT_KEY_NP_MUL, -1, -1 };
static int kb_xa1[] = { INPUTEVENT_KEY_NP_4, -1, INPUTEVENT_KEY_NP_6, -1, INPUTEVENT_KEY_NP_8, -1, INPUTEVENT_KEY_NP_2, INPUTEVENT_KEY_NP_5, -1, INPUTEVENT_KEY_CTRL, -1, INPUTEVENT_KEY_ALT_LEFT, -1, INPUTEVENT_KEY_SPACE, -1, -1 };
static int kb_xa2[] = { INPUTEVENT_KEY_D, -1, INPUTEVENT_KEY_G, -1, INPUTEVENT_KEY_R, -1, INPUTEVENT_KEY_F, -1, INPUTEVENT_KEY_A, -1, INPUTEVENT_KEY_S, -1, INPUTEVENT_KEY_Q, -1 };
static int kb_arcadia[] = { INPUTEVENT_KEY_F2, -1, INPUTEVENT_KEY_1, -1, INPUTEVENT_KEY_2, -1, INPUTEVENT_KEY_5, -1, INPUTEVENT_KEY_6, -1, -1 };
static int kb_arcadiaxa[] = { INPUTEVENT_KEY_1, -1, INPUTEVENT_KEY_2, -1, INPUTEVENT_KEY_3, -1, INPUTEVENT_KEY_4, -1, INPUTEVENT_KEY_6, -1, INPUTEVENT_KEY_LEFTBRACKET, INPUTEVENT_KEY_SHIFT_LEFT, -1, INPUTEVENT_KEY_RIGHTBRACKET, -1, INPUTEVENT_KEY_C, -1, INPUTEVENT_KEY_5, -1, INPUTEVENT_KEY_Z, -1, INPUTEVENT_KEY_X, -1, -1 };
static int *kbmaps[] = { kb_np, kb_ck, kb_se, kb_cd32_np, kb_cd32_ck, kb_cd32_se, kb_xa1, kb_xa2, kb_arcadia, kb_arcadiaxa };
*/
#endif

static struct uae_input_device_kbr_default keytrans_amiga[] = {
    { INPUTEVENT_KEY_CAPS_LOCK, INPUTEVENT_KEY_CAPS_LOCK, ID_FLAG_TOGGLE },
    { -1, 0 }
};

static struct uae_input_device_kbr_default *keytrans[] = {
    keytrans_amiga,
    keytrans_amiga,
    keytrans_amiga,
};

static int kb_none[] = { -1 };
static int *kbmaps[] = { kb_none, kb_none, kb_none, kb_none, kb_none,
        kb_none, kb_none, kb_none, kb_none, kb_none };

/*
 * Build a default key translation table using the
 * specified host keymap.
 */
void keyboard_settrans (void) {
    write_log("KB: keyboard_settrans\n");
	inputdevice_setkeytranslation (keytrans, kbmaps);
}
